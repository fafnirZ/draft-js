{"version":3,"sources":["draft.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Editorwrapper","styled","div","FCeditor","React","useState","EditorState","createEmpty","editorState","setEditorState","onChange","handleKeyCommand","command","newState","RichUtils","blockStyleFn","contentBlock","getType","style","display","onMouseDown","e","preventDefault","toggleInlineStyle","blockTypedContent","Modifier","setBlockType","getCurrentContent","getSelection","push","onClick","currentContent","console","log","data","JSON","stringify","convertToRaw","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAcMA,EAAgBC,IAAOC,IAAV,qTAyBJ,SAASC,EAAT,GAA4C,eAEzD,MAAsCC,IAAMC,UAC1C,kBAAMC,cAAYC,iBADpB,mBAAOC,EAAP,KAAoBC,EAApB,KAwGA,OACE,qCACE,cAACT,EAAD,UACE,cAAC,SAAD,CACAQ,YAAaA,EACbE,SAAUD,EACVE,iBAvGmB,SAACC,EAAcJ,GACtC,IAAMK,EAAWC,YAAUH,iBAAiBH,EAAaI,GACzD,OAAIC,GACFJ,EAAeI,GACR,WAEF,eAkGHE,aAlBoB,SAACC,GACzB,OAAQA,EAAaC,WACnB,IAAK,OACH,MAAO,aACT,IAAK,QACH,MAAO,cACT,QACE,MAAO,SAcT,sBAAKC,MAAO,CAACC,QAAQ,QAArB,UACE,wBAAQC,YAnGK,SAACC,GAClBA,EAAEC,iBACFb,EAAeK,YAAUS,kBAAkBf,EAAa,UAiGpD,eACA,uCACA,wBAAQY,YArFU,SAACC,GACvBA,EAAEC,iBAMF,IAAME,EAAoBC,WAASC,aACjClB,EAAYmB,oBACZnB,EAAYoB,eACZ,QAIFnB,EACEH,cAAYuB,KAAKrB,EAAagB,EAFnB,sBAwET,wBACA,wBAAQJ,YAlEW,SAACC,GACxBA,EAAEC,iBAMF,IAAME,EAAoBC,WAASC,aACjClB,EAAYmB,oBACZnB,EAAYoB,eACZ,SAIFnB,EACEH,cAAYuB,KAAKrB,EAAagB,EAFnB,sBAqDT,4BAEF,wBAAQM,QA9CE,WAQZ,IAAMC,EAAiBvB,EAAYmB,oBACnCK,QAAQC,IAAIF,GACZ,IAAMG,EAAOC,KAAKC,UAAUC,uBAAaN,IACzCC,QAAQC,IAAIC,IAmCV,0BC5JN,IAUeI,EAVO,WACpB,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAACpC,EAAD,SCKOqC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0a79970a.chunk.js","sourcesContent":["import React, { ReactElement } from 'react'\nimport { Editor, EditorState, RichUtils, convertToRaw, ContentBlock, Modifier, EditorChangeType} from 'draft-js';\n// import Editor from '@draft-js-plugins/editor'\n// import createSideToolbarPlugin from '@draft-js-plugins/side-toolbar'\nimport styled from 'styled-components'\n\n// const sideToolbarPlugin = createSideToolbarPlugin();\n//const { SideToolbar } = sideToolbarPlugin;\n\ninterface Props {\n  \n}\n\n\nconst Editorwrapper = styled.div`\n\n  color: black;\n\n  .DraftEditor-root {\n    border: 1px solid #000;\n    border-radius: 5px;\n    background: white;\n    height: 800px;\n    width: 600px;\n    overflow-y: auto;\n  }\n  .DraftEditor-editorContainer,\n  .public-DraftEditor-content {\n    height: 100%;\n  }\n\n`\n\n// blog \n// https://sendgrid.com/blog/how-we-use-draft-js-at-sendgrid/\n\n\n\n\nexport default function FCeditor({}: Props): ReactElement {\n\n  const [editorState, setEditorState] = React.useState(\n    () => EditorState.createEmpty(),\n  );\n\n  \n\n  /* bold and italics key stroke inputs*/\n  const handelKeyCommand = (command: any, editorState: any) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      setEditorState(newState);\n      return 'handled'\n    }\n    return 'not-handled'\n  }\n\n  const toggleBold = (e : React.SyntheticEvent) => {\n    e.preventDefault();\n    setEditorState(RichUtils.toggleInlineStyle(editorState, 'BOLD'));\n  }\n\n  /*\n  getting selection state\n  // https://draftjs.org/docs/api-reference-selection-state/\n  // selection state and getting selections\n  let selectionState = editorState.getSelection();\n  let anchorKey = selectionState.getAnchorKey();\n  let currentContent = editorState.getCurrentContent();\n  let currentContentBlock = currentContent.getBlockForKey(anchorKey);\n  */\n\n\n  const handleAlignLeft = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    // modifying editorstate to include current block type\n    // https://typescript.hotexamples.com/examples/draft-js/Modifier/setBlockType/typescript-modifier-setblocktype-method-examples.html\n\n    // change to type left\n    const blockTypedContent = Modifier.setBlockType(\n      editorState.getCurrentContent(),\n      editorState.getSelection(),\n      'left'\n    );\n  \n    const type = 'apply-block-type' as EditorChangeType;\n    setEditorState(\n      EditorState.push(editorState, blockTypedContent, type)\n    )\n\n  }\n\n  const handleAlignRight = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    // modifying editorstate to include current block type\n    // https://typescript.hotexamples.com/examples/draft-js/Modifier/setBlockType/typescript-modifier-setblocktype-method-examples.html\n\n    // change to type left\n    const blockTypedContent = Modifier.setBlockType(\n      editorState.getCurrentContent(),\n      editorState.getSelection(),\n      'right'\n    );\n  \n    const type = 'apply-block-type' as EditorChangeType;\n    setEditorState(\n      EditorState.push(editorState, blockTypedContent, type)\n    )\n    \n  }\n\n\n  /* handles changing data to json   */\n  const toOBj = () => {\n    // editorState : EditorState\n    // getCurrentContent() => ContentState\n    // getFirstBlock() => ContentBlock\n\n\n    //console.log(editorState.getCurrentContent().getFirstBlock().getType())\n    //console.log(editorState.getCurrentContent().convertToRaw())\n    const currentContent = editorState.getCurrentContent()\n    console.log(currentContent)\n    const data = JSON.stringify(convertToRaw(currentContent))\n    console.log(data)\n\n    // can just store this\n    // and convert raw back to contentState\n  }\n\n  // handles custom block styling for individual blocks???\n\n  const blockStyleHandler = (contentBlock:ContentBlock): string => {\n    switch (contentBlock.getType()) {\n      case 'left':\n        return 'align-left';\n      case 'right':\n        return 'align-right'\n      default:\n        return '';\n    }\n  }\n\n  return (\n    <>\n      <Editorwrapper>\n        <Editor\n        editorState={editorState} \n        onChange={setEditorState} \n        handleKeyCommand={handelKeyCommand}\n        blockStyleFn={blockStyleHandler}\n        />\n      </Editorwrapper>\n      <div style={{display:'flex'}}>\n        <button onMouseDown={toggleBold}>B</button>\n        <button>I</button>\n        <button onMouseDown={handleAlignLeft}>align left</button>\n        <button onMouseDown={handleAlignRight}>align Right</button>\n      </div>\n      <button onClick={toOBj}>to object</button>\n    </>  \n  )\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport FCeditor from './draft'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <FCeditor></FCeditor>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}